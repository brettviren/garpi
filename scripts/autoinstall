#!/bin/bash

usage () {
    cat <<EOF
usage: autoinstall [options] command [args]

options: 
  -c <url>		: set URL for the config file
  -g <url>		: set URL for GARPI
  -n <name>		: set name for projects directory
  -f			: optimized-away things are force to happen

commands:

 everything		: turn a green field into a fully installed area
			  equivalent to calling these in turn: 
    initialize		: prepare the area
    prereq		: build CMT and maybe git
    get_projects	: get code for projects
    cmtconfig		: set default CMTCONFIG
    externals		: download and build externals
    projects		: build projects


EOF
    exit 0
}

cfgurl=""
garpiurl_http="http://www.phy.bnl.gov/~bviren/garpi/releases/garpi-latest.tar.gz"
garpiurl_git="ssh://gitosis@gateway.phy.bnl.gov/garpi"
garpiurl="$garpiurl_http"
force=""
projects_name=""
set -- `getopt n:c:g:fG $*`
for arg in $* ; do
    case $arg in
	-n) projects_name=$2; shift 2;;
	-c) cfgurl=$2; shift 2;;
	-g) garpiurl=$2; shift 2;;
	-G) garpiurl=$garpiurl_git; shift ;;
	-f) force=yes ; shift ;;
	--) shift; break;
    esac
done
if [ -z "$1" ] ; then usage ; fi

logfile=$(pwd)/autoinstall-$(date +%g%m%d-%H%M%S).log
ln -sf $logfile autoinstall-latest.log

log () {
    echo $* >> $logfile 2>&1
}
info () {
    echo $* 1>&2
    log $*
}
err () {
    info error: $*
    exit 1
}
logcmd () {
    log "Running: \"$*\""
    $* >> $logfile 2>&1
    ret=$?
    if [ "$ret" != "0" ] ; then
	err "command \"$*\" failed with code \"$ret\""
	exit $ret
    fi
}

logcmd date
echo "Logging to $logfile and autoinstall-latest.log"

find_exe () {
    for exe in $*
    do
	found=$(which $exe)
	if [ -z "$found" ] ; then continue; fi
	echo $found
	return
    done
    err "Failed to find executable from: $*"
}

download_file () {
    url=$1 ; shift
    fn=$(basename $url)
    if [ -n "$force" ] ; then
	rm -f $fn
    fi
    if [ ! -f $fn ] ; then
	dl=$(find_exe wget curl)
	logcmd $dl $url
    fi
    echo $fn
}

work_begin () {
    if [ -d .aiwork ] ; then
	rm -rf .aiwork
    fi
    mkdir .aiwork
    cd .aiwork
}
work_end () {
    cd ..
    rm -rf .aiwork
}

get_garpi_http () {
    url=$1 ; shift
    if [ -z "$url" ] ; then url=$garpiurl; fi
    download_file $url
}
make_absolute () {
    fn=$1 ; shift
    dn=$(dirname $fn)
    if [ -z "$dn" -o "$dn" = "." ] ; then
	echo $(pwd)/$fn
    else
	echo $fn
    fi
}
unpack_tar () {
    tarball=$(make_absolute $1) ; shift
    work_begin
    zipped=''
    if echo $tarball|grep -q 'z$'; then zipped='-z'; fi
    logcmd tar $zipped -xvf $tarball
    dir=$(/bin/ls)
    info unpacked dir is $dir
    if [ -z "$dir" ] ; then
	err "tarfile \"$tarball\" was empty"
    fi
    if [ -d ../$dir ] ; then
	log "Removing ../$dir"
	rm -rf ../$dir
    fi
    mv $dir ..
    work_end
    echo $dir
}

get_unpack_garpi_http () {
    unpack_tar $(get_garpi_http)
}

get_unpack_garpi_git () {
    if [ ! -d garpi ] ; then
	logcmd git clone $garpiurl
    fi
    echo garpi
}
get_unpack_garpi () {
    if [ "$garpiurl" = "$garpiurl_git" ] ; then
	get_unpack_garpi_git
    else
	get_unpack_garpi_http
    fi
}


get_config () {
    url=$1 ; shift
    if [ -z "$url" ] ; then url=$cfgurl; fi
    if [ -z "$url" ] ; then 
	err 'get_config: no URL for configuration file'; 
	exit 1
    fi

    if echo $url | grep -q ':' ; then 
	download_file $url
    else
	echo $url
    fi
}

initialize () {
    cfg=$(get_config)
    if [ -z "$cfg" ] ; then exit 1; fi
    #info "got config: $cfg"
    cfg=$(make_absolute $cfg)
    #info "$cfg"
    garpidir=$(get_unpack_garpi)
    garpidir=$(make_absolute $garpidir)
    #info "Got garpidir \"$garpidir\""
    if [ -n "$projects_name" ] ; then
	name="-n projects_name"
    fi
    cat <<EOF>garpi-setup.sh
garpi () {
  export GARPIROOT=$garpidir
  export GARPICONFIG=$cfg
  export PYTHONPATH=\$GARPIROOT/python\${PYTHONPATH:+:\$PYTHONPATH}
  \$GARPIROOT/scripts/garpi $name -c $cfg \$*
}
EOF
}

prereq () {
    source garpi-setup.sh
    logcmd garpi setup
    logcmd garpi install_cmt
    if [ -z "$cfgurl" ] ; then
	cfgurl=$GARPICONFIG
    fi
    if [ -z "$cfgurl" ] ; then
	err "No GARPI config file in neither the environment nor from the command line options"
	exit 1
    fi    
    if [ -n "$(grep ^url $cfgurl|grep '\Wgit\W')" -a -z "$(which git)" ] ; then
	logcmd garpi install_git
    fi
}
get_projects () {
    source garpi-setup.sh
    info "Getting projects"
    logcmd garpi get_projects
    info "Initializing projects"
    logcmd garpi init_projects
}
cmtconfig () {
    source garpi-setup.sh
    export CMTCONFIG=$(garpi print_cmtconfig)
    logcmd garpi test_cmtconfig $CMTCONFIG
    info "Found CMTCONFIG=$CMTCONFIG"
    cat <<EOF> cmtconfig-setup.sh
export CMTCONFIG=$CMTCONFIG
EOF
    logcmd garpi init_cmtconfig $CMTCONFIG
}    

externals () {
    source garpi-setup.sh
    source cmtconfig-setup.sh
    info "Installing externals"
    logcmd garpi externals
}

projects () {
    source garpi-setup.sh
    source cmtconfig-setup.sh
    info "Installing projects"
    logcmd garpi projects
}
everything () {
    initialize
    prereq
    get_projects
    cmtconfig
    externals
    projects
}

what=$1 ; shift
eval $what $*

